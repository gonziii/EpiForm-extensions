@using Alloy.EpiFormsCustom.Elements
@using EPiServer.Forms.Helpers.Internal
@model Alloy.EpiFormsCustom.Elements.MultipleFileUploadElementBlock

@{
    var formElement = Model.FormElement;
    var labelText = Model.Label;
    var errorMessage = Model.GetErrorMessage();
    var maxNoFileValidator = Model.GetMaxNumberOfFilesValidatorNamespace();
    var totalFileSizeValidator = Model.GetTotalFileSizeValidatorNamespace();
}

<div class="js-multiple-file-upload multiple-file-upload form-group Form__Element FormFileUpload @Model.GetValidationCssClasses()" data-total-max-filesize-validator="@totalFileSizeValidator", data-max-no-files-validator="@maxNoFileValidator" data-epiforms-element-name="@formElement.ElementName">
    <label for="@formElement.Guid" class="Form__Element__Caption control-label">
        @labelText
    </label>
    <button class="btn btn-default multiple-file-upload__add-button js-add-file">+ Add file</button>
    <div class="multiple-file-upload__file-group hidden js-file-group">
        <input class="hidden FormFileUpload__Input js-file-input" name="@formElement.ElementName" id="@formElement.Guid" type="file"
               @if (!string.IsNullOrEmpty(Model.FileExtensions))
               {
                   @:accept="@Model.FileExtensions"
               }
               @Model.AttributesString/>
        <div class="js-file-name">
            <span class="multiple-file-upload__delete-button btn btn-danger js-delete-file">-</span>
        </div>
    </div>       
    <div class="FormFileUpload__PostedFile"></div>
    <div class="js-custom-validation Form__Element__ValidationError"></div>
    <div data-epiforms-linked-name="@formElement.ElementName" class="Form__Element__ValidationError">@errorMessage</div>
</div>

<script>
    var multipleFileUpload = (function($) {
            var inputFieldSelector = ".js-file-input";
            var addNewFileButtonSelector = ".js-add-file";
            var fileGroupSelector = ".js-file-group";
            var fileNameDivSelector = ".js-file-name";
            var deleteFileSelector = ".js-delete-file";
            var multipleFileUploadElementSelector = ".js-multiple-file-upload";
            var totalFileSizeValidatorData = "total-max-filesize-validator";
            var maxNoFilesValidatorData = "max-no-files-validator";

            function init() {
                var $addFileButtons = $(addNewFileButtonSelector);
                var $inputElements = $(inputFieldSelector);
                $inputElements.each(function() {
                    $(this).change(onFileAdd);
                });
                $addFileButtons.each(function() {
                    $(this).click(addNewFile);
                });
                enableClientSideValidation()
            }
            
            function enableClientSideValidation() {
                function waitForElement() {
                    if (typeof (epi) !== "undefined" && typeof (epi.EPiServer.Forms.Validators) !== "undefined") {
                        var customValidators = {};
                        var maxNoFiles = $(multipleFileUploadElementSelector).data(maxNoFilesValidatorData);
                        customValidators[maxNoFiles] = maxNumberOfFilesValidation;
                        var totalFileSize = $(multipleFileUploadElementSelector).data(totalFileSizeValidatorData);
                        customValidators[totalFileSize] = totalFileSizeValidation;
                        $.extend(epi.EPiServer.Forms.Validators, customValidators);
                    }
                    else {
                        setTimeout(waitForElement, 250);
                    }
                }
                waitForElement();
            };
            
            var totalFileSizeValidation = function (fieldName, fieldValue, validatorMetaData) {
                element = $("div").find("[data-epiforms-element-name=" + fieldName + "]");
                var totalSize = 0;
                if (element.length) {
                    var files = $(element).find("input")
                    $(files).each(function () {
                        if (typeof $(this)[0].files[0] != "undefined") {
                            totalSize += $(this)[0].files[0].size;
                        }
                    });
                    if (totalSize > validatorMetaData.model.totalSizeInBytes) {
                        return { isValid: false, message: validatorMetaData.model.message };
                    }
                }
                return { isValid: true };
            };

    var maxNumberOfFilesValidation = function (fieldName, fieldValue, validatorMetaData) {
        element = $("div").find("[data-epiforms-element-name=" + fieldName + "]"); //the fieldValue passed is only the first inputfield. We need to find all of them
        if (element.length) {
            var numberOfFiles = $(element).find("input").length-1;
            if (numberOfFiles > validatorMetaData.model.maxNoOfFiles) {
                return { isValid: false, message: validatorMetaData.model.message };
            }
        }
        return { isValid: true };
    };

            function onFileAdd() {
                var $inputElement = $(this);
                var $fileGroup = $inputElement.closest(fileGroupSelector);
                var file = $inputElement.get(0).files;
                if (file.length == 1) {
                    var $fileName = $fileGroup.find(fileNameDivSelector);
                    var html = $fileName.html();
                    html = $inputElement.get(0).files[0].name + html;
                    $fileName.html(html);
                    $fileName.find(deleteFileSelector).click(deleteFile);
                    $fileGroup.removeClass("hidden");
                }
            }

            function deleteFile() {
                var $fileGroup = $(this).closest(fileGroupSelector);
                $fileGroup.remove();
            }

            function addNewFile(e) {
                e.preventDefault();
                var addButton = this;
                var fileGroup = $(addButton).siblings(fileGroupSelector).last();
                var inputElement = fileGroup.children(inputFieldSelector);
                var $name = $(inputElement).attr("name").split('-');
                var number = 1;
                if ($name.length > 1) {
                    number = parseInt($name[1]);
                    number++;
                }
                var newInputElement = $(inputElement).clone().attr("name", $name[0] + "-" + number);
                newInputElement.change(onFileAdd);
                var newFileGroup = $(fileGroup).clone();
                $(newFileGroup).children(inputFieldSelector).replaceWith(newInputElement);
                $(fileGroup).after(newFileGroup);
                $(inputElement).click();
            }

            return {
                init: init
            }
        })(jQuery)
        .init();
</script>
